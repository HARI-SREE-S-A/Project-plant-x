#include <DHT.h>

// DHT11 Sensor Configuration - Compartment A
#define DHT_A_PIN 2
#define DHT_A_TYPE DHT11
DHT dhtA(DHT_A_PIN, DHT_A_TYPE);

// DHT11 Sensor Configuration - Compartment B
#define DHT_B_PIN 3
#define DHT_B_TYPE DHT11
DHT dhtB(DHT_B_PIN, DHT_B_TYPE);

// Relay Pin Definitions - Compartment A
#define RELAY_A1_PIN 4   // Cooling Fan/Ventilation A
#define RELAY_A2_PIN 5   // Dehumidifier/Extra Ventilation A
#define RELAY_A3_PIN 6   // Water Pump A
#define RELAY_A4_PIN 7   // LED Grow Lights A

// Relay Pin Definitions - Compartment B
#define RELAY_B1_PIN 8   // Cooling Fan/Ventilation B
#define RELAY_B2_PIN 9   // Dehumidifier/Extra Ventilation B
#define RELAY_B3_PIN 10  // Water Pump B
#define RELAY_B4_PIN 11  // LED Grow Lights B

// Environmental thresholds for both compartments
// You can customize these per compartment if needed
struct CompartmentSettings {
  float tempThreshold;
  float humidityThreshold;
  float lowHumidityThreshold;
  int lightOnHour;
  int lightOffHour;
  int morningWaterHour;
  int eveningWaterHour;
  unsigned long wateringDuration;
};

// Different settings for each compartment
CompartmentSettings settingsA = {
  23.0,  // Temperature threshold
  70.0,  // Humidity threshold
  40.0,  // Low humidity threshold
  6,     // Light on hour (6 AM)
  20,    // Light off hour (8 PM)
  7,     // Morning watering hour
  18,    // Evening watering hour
  30000  // Watering duration (30 seconds)
};

CompartmentSettings settingsB = {
  25.0,  // Different temp threshold for compartment B
  65.0,  // Different humidity threshold for compartment B
  35.0,  // Different low humidity threshold
  7,     // Light on hour (7 AM)
  19,    // Light off hour (7 PM)
  8,     // Morning watering hour (different schedule)
  17,    // Evening watering hour
  45000  // Longer watering duration (45 seconds)
};

// Sensor data structures
struct CompartmentData {
  float temperature;
  float humidity;
  bool relay1State;  // Cooling fan
  bool relay2State;  // Dehumidifier
  bool relay3State;  // Water pump
  bool relay4State;  // Grow lights
  unsigned long lastWateringTime;
  bool isWatering;
};

CompartmentData compartmentA;
CompartmentData compartmentB;

// Timing variables
unsigned long previousMillis = 0;
unsigned long sensorInterval = 2000;  // Read sensors every 2 seconds
unsigned long startTime;
int currentHour = 6;  // Start at 6 AM

void setup() {
  Serial.begin(9600);
  Serial.println("Dual Compartment Micro Farm Automation System Starting...");
  
  // Initialize DHT sensors
  dhtA.begin();
  dhtB.begin();
  
  // Initialize relay pins for Compartment A (assuming active LOW relays)
  pinMode(RELAY_A1_PIN, OUTPUT);
  pinMode(RELAY_A2_PIN, OUTPUT);
  pinMode(RELAY_A3_PIN, OUTPUT);
  pinMode(RELAY_A4_PIN, OUTPUT);
  
  // Initialize relay pins for Compartment B
  pinMode(RELAY_B1_PIN, OUTPUT);
  pinMode(RELAY_B2_PIN, OUTPUT);
  pinMode(RELAY_B3_PIN, OUTPUT);
  pinMode(RELAY_B4_PIN, OUTPUT);
  
  // Turn off all relays initially
  digitalWrite(RELAY_A1_PIN, HIGH);
  digitalWrite(RELAY_A2_PIN, HIGH);
  digitalWrite(RELAY_A3_PIN, HIGH);
  digitalWrite(RELAY_A4_PIN, HIGH);
  
  digitalWrite(RELAY_B1_PIN, HIGH);
  digitalWrite(RELAY_B2_PIN, HIGH);
  digitalWrite(RELAY_B3_PIN, HIGH);
  digitalWrite(RELAY_B4_PIN, HIGH);
  
  // Initialize compartment data
  initializeCompartmentData(compartmentA);
  initializeCompartmentData(compartmentB);
  
  startTime = millis();
  
  Serial.println("System initialized. Monitoring both compartments...");
  printSystemStatus();
}

void loop() {
  unsigned long currentMillis = millis();
  
  // Update simulated time (increment hour every 5 minutes for demo)
  // Remove this section and use RTC module for real implementation
  if (currentMillis - startTime > 300000) {  // 5 minutes = 1 hour
    currentHour = (currentHour + 1) % 24;
    startTime = currentMillis;
    Serial.print("Time: ");
    Serial.print(currentHour);
    Serial.println(":00");
  }
  
  // Read sensors and control both compartments at regular intervals
  if (currentMillis - previousMillis >= sensorInterval) {
    previousMillis = currentMillis;
    
    // Handle Compartment A
    readSensors('A');
    controlEnvironment('A');
    manageLighting('A');
    
    // Handle Compartment B
    readSensors('B');
    controlEnvironment('B');
    manageLighting('B');
  }
  
  // Handle scheduled watering for both compartments
  manageWatering('A', currentMillis);
  manageWatering('B', currentMillis);
  
  // Handle ongoing watering duration for both compartments
  checkWateringDuration('A', currentMillis);
  checkWateringDuration('B', currentMillis);
  
  delay(100);  // Small delay to prevent overwhelming the system
}

void initializeCompartmentData(CompartmentData &data) {
  data.temperature = 0;
  data.humidity = 0;
  data.relay1State = false;
  data.relay2State = false;
  data.relay3State = false;
  data.relay4State = false;
  data.lastWateringTime = 0;
  data.isWatering = false;
}

void readSensors(char compartment) {
  CompartmentData* data;
  DHT* sensor;
  
  if (compartment == 'A') {
    data = &compartmentA;
    sensor = &dhtA;
  } else {
    data = &compartmentB;
    sensor = &dhtB;
  }
  
  data->temperature = sensor->readTemperature();
  data->humidity = sensor->readHumidity();
  
  // Check if readings are valid
  if (isnan(data->temperature) || isnan(data->humidity)) {
    Serial.print("Failed to read from DHT sensor in Compartment ");
    Serial.println(compartment);
    return;
  }
  
  // Print sensor readings
  Serial.print("Compartment ");
  Serial.print(compartment);
  Serial.print(" - Temperature: ");
  Serial.print(data->temperature);
  Serial.print("Â°C, Humidity: ");
  Serial.print(data->humidity);
  Serial.println("%");
}

void controlEnvironment(char compartment) {
  CompartmentData* data;
  CompartmentSettings* settings;
  int relay1Pin, relay2Pin;
  bool stateChanged = false;
  
  if (compartment == 'A') {
    data = &compartmentA;
    settings = &settingsA;
    relay1Pin = RELAY_A1_PIN;
    relay2Pin = RELAY_A2_PIN;
  } else {
    data = &compartmentB;
    settings = &settingsB;
    relay1Pin = RELAY_B1_PIN;
    relay2Pin = RELAY_B2_PIN;
  }
  
  // Temperature control (Relay 1 - Cooling Fan)
  if (data->temperature > settings->tempThreshold && !data->relay1State) {
    digitalWrite(relay1Pin, LOW);  // Turn on cooling fan
    data->relay1State = true;
    Serial.print("ðŸŒ¡Compartment ");
    Serial.print(compartment);
    Serial.println(": High temperature detected! Cooling fan ON");
    stateChanged = true;
  }
  else if (data->temperature <= (settings->tempThreshold - 1.0) && data->relay1State) {
    digitalWrite(relay1Pin, HIGH);  // Turn off cooling fan
    data->relay1State = false;
    Serial.print("ðŸŒ¡Compartment ");
    Serial.print(compartment);
    Serial.println(": Temperature normalized. Cooling fan OFF");
    stateChanged = true;
  }
  
  // Humidity control (Relay 2 - Dehumidifier)
  if (data->humidity > settings->humidityThreshold && !data->relay2State) {
    digitalWrite(relay2Pin, LOW);  // Turn on dehumidifier
    data->relay2State = true;
    Serial.print("Compartment ");
    Serial.print(compartment);
    Serial.println(": High humidity detected! Dehumidifier ON");
    stateChanged = true;
  }
  else if (data->humidity <= (settings->humidityThreshold - 5.0) && data->relay2State) {
    digitalWrite(relay2Pin, HIGH);  // Turn off dehumidifier
    data->relay2State = false;
    Serial.print("Compartment ");
    Serial.print(compartment);
    Serial.println(": Humidity normalized. Dehumidifier OFF");
    stateChanged = true;
  }
  
  // Emergency low humidity warning
  if (data->humidity < settings->lowHumidityThreshold) {
    Serial.print("âš WARNING: Compartment ");
    Serial.print(compartment);
    Serial.println(" humidity too low for optimal plant growth!");
  }
  
  if (stateChanged) {
    printSystemStatus();
  }
}

void manageLighting(char compartment) {
  CompartmentData* data;
  CompartmentSettings* settings;
  int relay4Pin;
  
  if (compartment == 'A') {
    data = &compartmentA;
    settings = &settingsA;
    relay4Pin = RELAY_A4_PIN;
  } else {
    data = &compartmentB;
    settings = &settingsB;
    relay4Pin = RELAY_B4_PIN;
  }
  
  // Grow lights schedule based on compartment settings
  bool shouldLightsBeOn = (currentHour >= settings->lightOnHour && currentHour < settings->lightOffHour);
  
  if (shouldLightsBeOn && !data->relay4State) {
    digitalWrite(relay4Pin, LOW);  // Turn on grow lights
    data->relay4State = true;
    Serial.print("Compartment ");
    Serial.print(compartment);
    Serial.println(": Grow lights ON - Photoperiod started");
  }
  else if (!shouldLightsBeOn && data->relay4State) {
    digitalWrite(relay4Pin, HIGH);  // Turn off grow lights
    data->relay4State = false;
    Serial.print("Compartment ");
    Serial.print(compartment);
    Serial.println(": Grow lights OFF - Dark period started");
  }
}

void manageWatering(char compartment, unsigned long currentMillis) {
  CompartmentData* data;
  CompartmentSettings* settings;
  
  if (compartment == 'A') {
    data = &compartmentA;
    settings = &settingsA;
  } else {
    data = &compartmentB;
    settings = &settingsB;
  }
  
  // Check for scheduled watering times
  bool morningWatering = (currentHour == settings->morningWaterHour);
  bool eveningWatering = (currentHour == settings->eveningWaterHour);
  
  // Check if it's watering time and we haven't watered in the last hour
  if ((morningWatering || eveningWatering) && !data->isWatering && 
      (currentMillis - data->lastWateringTime > 3600000 || data->lastWateringTime == 0)) {
    
    // Additional check: only water if humidity is not too high
    if (data->humidity < 80.0) {
      startWatering(compartment, currentMillis);
    } else {
      Serial.print("Compartment ");
      Serial.print(compartment);
      Serial.println(": Skipping watering - humidity too high");
    }
  }
}

void startWatering(char compartment, unsigned long currentMillis) {
  CompartmentData* data;
  CompartmentSettings* settings;
  int relay3Pin;
  
  if (compartment == 'A') {
    data = &compartmentA;
    settings = &settingsA;
    relay3Pin = RELAY_A3_PIN;
  } else {
    data = &compartmentB;
    settings = &settingsB;
    relay3Pin = RELAY_B3_PIN;
  }
  
  digitalWrite(relay3Pin, LOW);  // Turn on water pump
  data->relay3State = true;
  data->isWatering = true;
  data->lastWateringTime = currentMillis;
  
  String timeOfDay = (currentHour == settings->morningWaterHour) ? "Morning" : "Evening";
  Serial.print("Compartment ");
  Serial.print(compartment);
  Serial.print(": ");
  Serial.print(timeOfDay);
  Serial.println(" watering cycle started");
  Serial.print("Watering for ");
  Serial.print(settings->wateringDuration / 1000);
  Serial.println(" seconds...");
}

void checkWateringDuration(char compartment, unsigned long currentMillis) {
  CompartmentData* data;
  CompartmentSettings* settings;
  
  if (compartment == 'A') {
    data = &compartmentA;
    settings = &settingsA;
  } else {
    data = &compartmentB;
    settings = &settingsB;
  }
  
  if (data->isWatering && (currentMillis - data->lastWateringTime > settings->wateringDuration)) {
    stopWatering(compartment);
  }
}

void stopWatering(char compartment) {
  CompartmentData* data;
  int relay3Pin;
  
  if (compartment == 'A') {
    data = &compartmentA;
    relay3Pin = RELAY_A3_PIN;
  } else {
    data = &compartmentB;
    relay3Pin = RELAY_B3_PIN;
  }
  
  digitalWrite(relay3Pin, HIGH);  // Turn off water pump
  data->relay3State = false;
  data->isWatering = false;
  Serial.print("Compartment ");
  Serial.print(compartment);
  Serial.println(": Watering cycle completed");
}

void printSystemStatus() {
  Serial.println("========================================");
  Serial.println(" DUAL COMPARTMENT MICRO FARM STATUS ");
  Serial.println("========================================");
  Serial.print("Time: ");
  Serial.print(currentHour);
  Serial.println(":00");
  Serial.println("----------------------------------------");
  
  // Compartment A Status
  Serial.println(" COMPARTMENT A:");
  Serial.print("   Temperature: ");
  Serial.print(compartmentA.temperature);
  Serial.print("Â°C (Threshold: ");
  Serial.print(settingsA.tempThreshold);
  Serial.println("Â°C)");
  Serial.print("   Humidity: ");
  Serial.print(compartmentA.humidity);
  Serial.print("% (Threshold: ");
  Serial.print(settingsA.humidityThreshold);
  Serial.println("%)");
  Serial.print("   Cooling Fan: ");
  Serial.println(compartmentA.relay1State ? "ON" : "OFF");
  Serial.print("   Dehumidifier: ");
  Serial.println(compartmentA.relay2State ? "ON" : "OFF");
  Serial.print("   Water Pump: ");
  Serial.println(compartmentA.relay3State ? "ON" : "OFF");
  Serial.print("   Grow Lights: ");
  Serial.println(compartmentA.relay4State ? "ON" : "OFF");
  
  Serial.println("----------------------------------------");
  
  // Compartment B Status
  Serial.println(" COMPARTMENT B:");
  Serial.print("   Temperature: ");
  Serial.print(compartmentB.temperature);
  Serial.print("Â°C (Threshold: ");
  Serial.print(settingsB.tempThreshold);
  Serial.println("Â°C)");
  Serial.print("   Humidity: ");
  Serial.print(compartmentB.humidity);
  Serial.print("% (Threshold: ");
  Serial.print(settingsB.humidityThreshold);
  Serial.println("%)");
  Serial.print("   Cooling Fan: ");
  Serial.println(compartmentB.relay1State ? "ON" : "OFF");
  Serial.print("   Dehumidifier: ");
  Serial.println(compartmentB.relay2State ? "ON" : "OFF");
  Serial.print("   Water Pump: ");
  Serial.println(compartmentB.relay3State ? "ON" : "OFF");
  Serial.print("   Grow Lights: ");
  Serial.println(compartmentB.relay4State ? "ON" : "OFF");
  
  Serial.println("========================================");
  Serial.println();
}

// Emergency stop function for both compartments
void emergencyStop() {
  // Turn off all relays for Compartment A
  digitalWrite(RELAY_A1_PIN, HIGH);
  digitalWrite(RELAY_A2_PIN, HIGH);
  digitalWrite(RELAY_A3_PIN, HIGH);
  digitalWrite(RELAY_A4_PIN, HIGH);
  
  // Turn off all relays for Compartment B
  digitalWrite(RELAY_B1_PIN, HIGH);
  digitalWrite(RELAY_B2_PIN, HIGH);
  digitalWrite(RELAY_B3_PIN, HIGH);
  digitalWrite(RELAY_B4_PIN, HIGH);
  
  // Reset all states
  initializeCompartmentData(compartmentA);
  initializeCompartmentData(compartmentB);
  
  Serial.println(" EMERGENCY STOP ACTIVATED - All systems OFF in both compartments");
}
